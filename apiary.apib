FORMAT: 1A
HOST: http://diagnostic.api/

# Diagnostic API
Diagnotic API designed for extract information about hardware and operating system configurations from node in cluster
This version of API is focused on OpenStack and resources managed by component services of OpenStack platform


# Group Notes
Notes related resources of the **Diagnostic API**

## Nodes Collection [/node]
### List all nodes known to the service [GET]
+ Response 200 (application/json)

        [{
          "id": 0, "name": "hostname-0.example.com"
        }, {
          "id": 1, "name": "hostname-1.example.com"
        }]

### Create node [POST]
+ Request (application/json)

        { "name": "hostname-2.example.com" }

+ Response 200 (application/json)

        { "id": 2, "name": "hostname-2.example.com" }

## Node [/node/{id}]
### Single node object that contains all available information about the node in parameters
+ Parameters
    + id (required, string, `550e8400-e29b-41d4-a716-446655440000`) ... UUID of node in the API.

### Detailed information about node object [GET]
+ Response 200 (application/json)

    + Body

            {
                "id": "550e8400-e29b-41d4-a716-446655440000", "name": "hostname-1.example.com",
                    "hw": {
                        "cpu": {
                            "cache": 6144,
                            "cores": 4,
                            "freq": 1600,
                            "name": "Quad core Intel Core i5-3470 CPU"
                        },
                        "memory": {
                            "total": 7673.9,
                        },
                        "nic": [{
                            "name": "eth0",
                            "hwaddr": "60:a4:4c:ac:fe:d6",
                            "ipaddr": "172.18.66.165",
                            "model": "Realtek RTL8111/8168",
                            "speed": 10,
                        }, {
                            "name": "eth1",
                            "hwaddr": "52:54:00:cf:cd:8b",
                            "ipaddr": "10.0.0.2",
                            "model": "Realtek RTL8111/8168",
                            "speed": 1,
                        }],
                        "disk": [{
                            "name": "/dev/sda1",
                            "size": 500
                        }, {
                            "name": "/dev/sda2",
                            "size": 500
                        }],
                    }
                    "os": {
                        "network": {
                            "iptables": {
                                "filter": {
                                    "input": [
                                        "rule1",
                                        "ruel2" 
                                    ],
                                    "forward": [
                                        "rule3",
                                        "rule4"
                                    ],
                                    "output": [
                                        "rule5"
                                    ],
                                    "custom1": [
                                        "rule6"
                                    ]
                                }
                            },
                            "route": [
                                "route1",
                                "route2",
                            ],
                            "netns": []
                        },
                        "storage": {
                            "iscsi_target": [
                                "name": "iqn.2001-04.com.example:diskarrays-sn-a8675309",
                                "lun": 0,
                                "device": "/dev/sda1"
                            ],
                        },
                        "lvm": {
                            "volgroup": [{
                                "name": "VolGroup00",
                                }],
                            "pv": [
                                "/dev/sda1",
                                "/dev/sdb1"
                            ],
                            "logvol": [{
                                "vg": "VolGroup00",
                                "name": "LogVol01",
                                "size": 10
                            }]
                        },
                        "filesystem": [{
                            "name": "/boot",
                            "disk": "/dev/sdb1",
                            "size": 1
                        }, {
                            "name": "/",
                            "disk": "/dev/sda1",
                            "size": 500
                        }],
                        "hypervisor": [{
                            name": "instance-000001",
                            "state": "running"
                        }]
                    }
                }

### Update node information [POST]
+ Response 200 (applicaiton/json)

    + Body
    
            { "id": 3, "name": "hostname-3.example.com" }

## Node Hardware Configuraiton [/node/{id}/hw]
### Hardware configuration of the node identified by parameters
+ Parameters
    + id (required, string, `550e8400-e29b-41d4-a716-446655440000`) ... UUID of node in the API.

### Get detailed information about hardware configuration of the node [GET]
+ Response 200 (application/json)

    + Body
    
            {
                "id": "550e8400-e29b-41d4-a716-446655440000", "name": "hostname-1.example.com",
                "hw": {
                    "cpu": {
                        "cache": 6144,
                        "cores": 4,
                        "freq": 1600,
                        "name": "Quad core Intel Core i5-3470 CPU"
                    },
                    "memory": {
                        "total": 7673.9,
                    },
                    "nic": [{
                        "name": "eth0",
                        "hwaddr": "60:a4:4c:ac:fe:d6",
                        "ipaddr": "172.18.66.165",
                        "model": "Realtek RTL8111/8168",
                        "speed": 10,
                    }, {
                        "name": "eth1",
                        "hwaddr": "52:54:00:cf:cd:8b",
                        "ipaddr": "10.0.0.2",
                        "model": "Realtek RTL8111/8168",
                        "speed": 1,
                    }],
                    "disk": [{
                        "name": "/dev/sda1",
                        "size": 500
                    }, {
                        "name": "/dev/sda2",
                        "size": 500
                    }],
                }
            }

## Node Operating System Configuration [/node/{id}/os]
### Operating system level configurations of node identified by parameters
+ Parameters
    + id (required, string, `550e8400-e29b-41d4-a716-446655440000`) ... UUID of node in the API.
    
### Get detailed information about operating system configuration of the node [GET]
+ Response 200 (application/json)

    + Body
    
            {
                "id": "550e8400-e29b-41d4-a716-446655440000", "name": "hostname-1.example.com",
                "os": {
                    "network": {
                        "iptables": {
                            "filter": {
                                "input": [
                                    "rule1",
                                    "ruel2" 
                                ],
                                "forward": [
                                    "rule3",
                                    "rule4"
                                ],
                                "output": [
                                    "rule5"
                                ],
                                "custom1": [
                                    "rule6"
                                ]
                            }
                        },
                        "route": [
                            "route1",
                            "route2",
                        ],
                        "netns": []
                    },
                    "storage": {
                        "iscsi_target": [
                            "name": "iqn.2001-04.com.example:diskarrays-sn-a8675309",
                            "lun": 0,
                            "device": "/dev/sda1"
                        ],
                    },
                    "lvm": {
                        "volgroup": [{
                            "name": "VolGroup00",
                            }],
                        "pv": [
                            "/dev/sda1",
                            "/dev/sdb1"
                        ],
                        "logvol": [{
                            "vg": "VolGroup00",
                            "name": "LogVol01",
                            "size": 10
                        }]
                    },
                    "filesystem": [{
                        "name": "/boot",
                        "disk": "/dev/sdb1",
                        "size": 1
                    }, {
                        "name": "/",
                        "disk": "/dev/sda1",
                        "size": 500
                    }],
                    "hypervisor": [{
                        name": "instance-000001",
                        "state": "running"
                    }]
                }
            }

## Openstack Collection [/openstack]
### List all Openstack installations [GET]
+ Response 200 (application/json)

        [{
          "id": 0, "name": "customer0" 
        }, {
          "id": 1, "name": "customer1"
        }]

### Create a Openstack installation [POST]
+ Request (application/json)

        { "name": "customer3" }

+ Response 201 (application/json)

        { "id": 2, "name": "customer3" }

## Openstack cluster [/openstack/{id}]
### A single openstack object with all available information        

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "id": 2, "elements": ["hw"] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack cluster hardware [/openstack/{id}/hw]
### A single openstack object with detailed information about hardware configuration of the cluster       

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": ["node0", "node1", "node2"] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack cluster node [/openstack/{id}/hw/{nodeId}]
### A single node object with all available information about hardware configuration of the node in the OpenStack cluster

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.
    + nodeId (required, string, `node0`) ... String `nodeId` from the nodelist 
    
### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": ["cpu", "memory", "nic"] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack [/openstack/{id}/hw/{nodeID}/cpu]
### A single openstack object with all available information          


+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.
    
    

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": ["cpu0", "cpu1", "cpu2", "cpu3"] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack [/openstack/{id}/hw/{nodeId}/cpu/{cpuId}]
### A single openstack object with all available information          

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.
    

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": [ { "Name":  "Quad core Intel Core i5-3470 CPU", "cores" : 4, "freq" : 1600} ] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack [/openstack/{id}/hw/{nodeId}/memory]
### A single openstack object with all available information          

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": [ "total": 7673 ] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack [/openstack/{id}/hw/{nodeId}/nic]
### A single openstack object with all available information          

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": [ "nic0", "nic1", "nic2", "nic3" ] }

### Remove a Openstack [DELETE]
+ Response 204

## Openstack [/openstack/{id}/hw/{nodeId}/nic/{nicId}]
### A single openstack object with all available information          

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Openstack installation to perform action with. Has example value.

### Retrieve a Openstack [GET]
+ Response 200 (application/json)

    + Body

            { "elements": [ { "speed": 10, "name": "Realtek RTL8111/8168" } ] }

### Remove a Openstack [DELETE]
+ Response 204